package com.viseator.chartit.data.style;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHART_SET_STYLE_ENTITY".
*/
public class ChartSetStyleEntityDao extends AbstractDao<ChartSetStyleEntity, Long> {

    public static final String TABLENAME = "CHART_SET_STYLE_ENTITY";

    /**
     * Properties of entity ChartSetStyleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Position = new Property(1, int.class, "position", false, "POSITION");
        public final static Property Mode = new Property(2, int.class, "mode", false, "MODE");
        public final static Property ValueTextColor = new Property(3, String.class, "valueTextColor", false, "VALUE_TEXT_COLOR");
        public final static Property ValueTextSize = new Property(4, float.class, "valueTextSize", false, "VALUE_TEXT_SIZE");
        public final static Property DrawValues = new Property(5, Boolean.class, "drawValues", false, "DRAW_VALUES");
        public final static Property HighlightColor = new Property(6, String.class, "highlightColor", false, "HIGHLIGHT_COLOR");
        public final static Property HighlightLineWidth = new Property(7, float.class, "highlightLineWidth", false, "HIGHLIGHT_LINE_WIDTH");
        public final static Property FillColor = new Property(8, int.class, "fillColor", false, "FILL_COLOR");
        public final static Property FillAlpha = new Property(9, int.class, "fillAlpha", false, "FILL_ALPHA");
        public final static Property LineWidth = new Property(10, float.class, "lineWidth", false, "LINE_WIDTH");
        public final static Property CircleRadius = new Property(11, float.class, "circleRadius", false, "CIRCLE_RADIUS");
        public final static Property DrawCircles = new Property(12, Boolean.class, "drawCircles", false, "DRAW_CIRCLES");
        public final static Property CircleColor = new Property(13, int.class, "circleColor", false, "CIRCLE_COLOR");
        public final static Property DrawCircleHole = new Property(14, Boolean.class, "drawCircleHole", false, "DRAW_CIRCLE_HOLE");
        public final static Property EnableDashedLine = new Property(15, Boolean.class, "enableDashedLine", false, "ENABLE_DASHED_LINE");
        public final static Property BarSpacePercent = new Property(16, float.class, "barSpacePercent", false, "BAR_SPACE_PERCENT");
        public final static Property BarShadowColor = new Property(17, String.class, "barShadowColor", false, "BAR_SHADOW_COLOR");
        public final static Property DrawFill = new Property(18, Boolean.class, "drawFill", false, "DRAW_FILL");
    }


    public ChartSetStyleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChartSetStyleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHART_SET_STYLE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"POSITION\" INTEGER NOT NULL ," + // 1: position
                "\"MODE\" INTEGER NOT NULL ," + // 2: mode
                "\"VALUE_TEXT_COLOR\" TEXT," + // 3: valueTextColor
                "\"VALUE_TEXT_SIZE\" REAL NOT NULL ," + // 4: valueTextSize
                "\"DRAW_VALUES\" INTEGER," + // 5: drawValues
                "\"HIGHLIGHT_COLOR\" TEXT," + // 6: highlightColor
                "\"HIGHLIGHT_LINE_WIDTH\" REAL NOT NULL ," + // 7: highlightLineWidth
                "\"FILL_COLOR\" INTEGER NOT NULL ," + // 8: fillColor
                "\"FILL_ALPHA\" INTEGER NOT NULL ," + // 9: fillAlpha
                "\"LINE_WIDTH\" REAL NOT NULL ," + // 10: lineWidth
                "\"CIRCLE_RADIUS\" REAL NOT NULL ," + // 11: circleRadius
                "\"DRAW_CIRCLES\" INTEGER," + // 12: drawCircles
                "\"CIRCLE_COLOR\" INTEGER NOT NULL ," + // 13: circleColor
                "\"DRAW_CIRCLE_HOLE\" INTEGER," + // 14: drawCircleHole
                "\"ENABLE_DASHED_LINE\" INTEGER," + // 15: enableDashedLine
                "\"BAR_SPACE_PERCENT\" REAL NOT NULL ," + // 16: barSpacePercent
                "\"BAR_SHADOW_COLOR\" TEXT," + // 17: barShadowColor
                "\"DRAW_FILL\" INTEGER);"); // 18: drawFill
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHART_SET_STYLE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChartSetStyleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPosition());
        stmt.bindLong(3, entity.getMode());
 
        String valueTextColor = entity.getValueTextColor();
        if (valueTextColor != null) {
            stmt.bindString(4, valueTextColor);
        }
        stmt.bindDouble(5, entity.getValueTextSize());
 
        Boolean drawValues = entity.getDrawValues();
        if (drawValues != null) {
            stmt.bindLong(6, drawValues ? 1L: 0L);
        }
 
        String highlightColor = entity.getHighlightColor();
        if (highlightColor != null) {
            stmt.bindString(7, highlightColor);
        }
        stmt.bindDouble(8, entity.getHighlightLineWidth());
        stmt.bindLong(9, entity.getFillColor());
        stmt.bindLong(10, entity.getFillAlpha());
        stmt.bindDouble(11, entity.getLineWidth());
        stmt.bindDouble(12, entity.getCircleRadius());
 
        Boolean drawCircles = entity.getDrawCircles();
        if (drawCircles != null) {
            stmt.bindLong(13, drawCircles ? 1L: 0L);
        }
        stmt.bindLong(14, entity.getCircleColor());
 
        Boolean drawCircleHole = entity.getDrawCircleHole();
        if (drawCircleHole != null) {
            stmt.bindLong(15, drawCircleHole ? 1L: 0L);
        }
 
        Boolean enableDashedLine = entity.getEnableDashedLine();
        if (enableDashedLine != null) {
            stmt.bindLong(16, enableDashedLine ? 1L: 0L);
        }
        stmt.bindDouble(17, entity.getBarSpacePercent());
 
        String barShadowColor = entity.getBarShadowColor();
        if (barShadowColor != null) {
            stmt.bindString(18, barShadowColor);
        }
 
        Boolean drawFill = entity.getDrawFill();
        if (drawFill != null) {
            stmt.bindLong(19, drawFill ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChartSetStyleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPosition());
        stmt.bindLong(3, entity.getMode());
 
        String valueTextColor = entity.getValueTextColor();
        if (valueTextColor != null) {
            stmt.bindString(4, valueTextColor);
        }
        stmt.bindDouble(5, entity.getValueTextSize());
 
        Boolean drawValues = entity.getDrawValues();
        if (drawValues != null) {
            stmt.bindLong(6, drawValues ? 1L: 0L);
        }
 
        String highlightColor = entity.getHighlightColor();
        if (highlightColor != null) {
            stmt.bindString(7, highlightColor);
        }
        stmt.bindDouble(8, entity.getHighlightLineWidth());
        stmt.bindLong(9, entity.getFillColor());
        stmt.bindLong(10, entity.getFillAlpha());
        stmt.bindDouble(11, entity.getLineWidth());
        stmt.bindDouble(12, entity.getCircleRadius());
 
        Boolean drawCircles = entity.getDrawCircles();
        if (drawCircles != null) {
            stmt.bindLong(13, drawCircles ? 1L: 0L);
        }
        stmt.bindLong(14, entity.getCircleColor());
 
        Boolean drawCircleHole = entity.getDrawCircleHole();
        if (drawCircleHole != null) {
            stmt.bindLong(15, drawCircleHole ? 1L: 0L);
        }
 
        Boolean enableDashedLine = entity.getEnableDashedLine();
        if (enableDashedLine != null) {
            stmt.bindLong(16, enableDashedLine ? 1L: 0L);
        }
        stmt.bindDouble(17, entity.getBarSpacePercent());
 
        String barShadowColor = entity.getBarShadowColor();
        if (barShadowColor != null) {
            stmt.bindString(18, barShadowColor);
        }
 
        Boolean drawFill = entity.getDrawFill();
        if (drawFill != null) {
            stmt.bindLong(19, drawFill ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChartSetStyleEntity readEntity(Cursor cursor, int offset) {
        ChartSetStyleEntity entity = new ChartSetStyleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // position
            cursor.getInt(offset + 2), // mode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // valueTextColor
            cursor.getFloat(offset + 4), // valueTextSize
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // drawValues
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // highlightColor
            cursor.getFloat(offset + 7), // highlightLineWidth
            cursor.getInt(offset + 8), // fillColor
            cursor.getInt(offset + 9), // fillAlpha
            cursor.getFloat(offset + 10), // lineWidth
            cursor.getFloat(offset + 11), // circleRadius
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // drawCircles
            cursor.getInt(offset + 13), // circleColor
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // drawCircleHole
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // enableDashedLine
            cursor.getFloat(offset + 16), // barSpacePercent
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // barShadowColor
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0 // drawFill
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChartSetStyleEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPosition(cursor.getInt(offset + 1));
        entity.setMode(cursor.getInt(offset + 2));
        entity.setValueTextColor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValueTextSize(cursor.getFloat(offset + 4));
        entity.setDrawValues(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setHighlightColor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHighlightLineWidth(cursor.getFloat(offset + 7));
        entity.setFillColor(cursor.getInt(offset + 8));
        entity.setFillAlpha(cursor.getInt(offset + 9));
        entity.setLineWidth(cursor.getFloat(offset + 10));
        entity.setCircleRadius(cursor.getFloat(offset + 11));
        entity.setDrawCircles(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setCircleColor(cursor.getInt(offset + 13));
        entity.setDrawCircleHole(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setEnableDashedLine(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setBarSpacePercent(cursor.getFloat(offset + 16));
        entity.setBarShadowColor(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDrawFill(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChartSetStyleEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChartSetStyleEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChartSetStyleEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
