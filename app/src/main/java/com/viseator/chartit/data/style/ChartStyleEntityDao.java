package com.viseator.chartit.data.style;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.viseator.chartit.data.chart.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHART_STYLE_ENTITY".
*/
public class ChartStyleEntityDao extends AbstractDao<ChartStyleEntity, Long> {

    public static final String TABLENAME = "CHART_STYLE_ENTITY";

    /**
     * Properties of entity ChartStyleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property BackgroundColor = new Property(1, String.class, "backgroundColor", false, "BACKGROUND_COLOR");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property DrawGrid = new Property(3, Boolean.class, "drawGrid", false, "DRAW_GRID");
        public final static Property GridColor = new Property(4, String.class, "gridColor", false, "GRID_COLOR");
        public final static Property BorderColor = new Property(5, String.class, "borderColor", false, "BORDER_COLOR");
        public final static Property BorderWidth = new Property(6, float.class, "borderWidth", false, "BORDER_WIDTH");
        public final static Property MaxVisibleValueCount = new Property(7, int.class, "maxVisibleValueCount", false, "MAX_VISIBLE_VALUE_COUNT");
        public final static Property EnableXAxis = new Property(8, Boolean.class, "enableXAxis", false, "ENABLE_XAXIS");
        public final static Property EnableYAxis = new Property(9, Boolean.class, "enableYAxis", false, "ENABLE_YAXIS");
        public final static Property DrawXAxisLabel = new Property(10, Boolean.class, "drawXAxisLabel", false, "DRAW_XAXIS_LABEL");
        public final static Property DrawYAxisLabel = new Property(11, Boolean.class, "drawYAxisLabel", false, "DRAW_YAXIS_LABEL");
        public final static Property DrawXAxisLine = new Property(12, Boolean.class, "drawXAxisLine", false, "DRAW_XAXIS_LINE");
        public final static Property DrawYAxisLine = new Property(13, Boolean.class, "drawYAxisLine", false, "DRAW_YAXIS_LINE");
        public final static Property DrawXAxisGridLines = new Property(14, Boolean.class, "drawXAxisGridLines", false, "DRAW_XAXIS_GRID_LINES");
        public final static Property DrawYAxisGridLines = new Property(15, Boolean.class, "drawYAxisGridLines", false, "DRAW_YAXIS_GRID_LINES");
        public final static Property XAxisGridLineWidth = new Property(16, float.class, "xAxisGridLineWidth", false, "X_AXIS_GRID_LINE_WIDTH");
        public final static Property YAxisGridLineWidth = new Property(17, float.class, "yAxisGridLineWidth", false, "Y_AXIS_GRID_LINE_WIDTH");
        public final static Property SetXAxisGridDashLine = new Property(18, Boolean.class, "setXAxisGridDashLine", false, "SET_XAXIS_GRID_DASH_LINE");
        public final static Property SetYAxisGridDashLine = new Property(19, Boolean.class, "setYAxisGridDashLine", false, "SET_YAXIS_GRID_DASH_LINE");
        public final static Property TextSize = new Property(20, float.class, "textSize", false, "TEXT_SIZE");
        public final static Property XAxisPosition = new Property(21, int.class, "xAxisPosition", false, "X_AXIS_POSITION");
        public final static Property XAxisTextColor = new Property(22, int.class, "xAxisTextColor", false, "X_AXIS_TEXT_COLOR");
        public final static Property YAxisTextColor = new Property(23, int.class, "yAxisTextColor", false, "Y_AXIS_TEXT_COLOR");
        public final static Property ShowLeftYAxis = new Property(24, Boolean.class, "showLeftYAxis", false, "SHOW_LEFT_YAXIS");
        public final static Property ShowRightYAxis = new Property(25, Boolean.class, "showRightYAxis", false, "SHOW_RIGHT_YAXIS");
        public final static Property DrawZeroLine = new Property(26, Boolean.class, "drawZeroLine", false, "DRAW_ZERO_LINE");
        public final static Property ZeroLineWidth = new Property(27, float.class, "zeroLineWidth", false, "ZERO_LINE_WIDTH");
        public final static Property ZeroLineColor = new Property(28, String.class, "zeroLineColor", false, "ZERO_LINE_COLOR");
        public final static Property DrawLegend = new Property(29, Boolean.class, "drawLegend", false, "DRAW_LEGEND");
    }


    public ChartStyleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChartStyleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHART_STYLE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"BACKGROUND_COLOR\" TEXT," + // 1: backgroundColor
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"DRAW_GRID\" INTEGER," + // 3: drawGrid
                "\"GRID_COLOR\" TEXT," + // 4: gridColor
                "\"BORDER_COLOR\" TEXT," + // 5: borderColor
                "\"BORDER_WIDTH\" REAL NOT NULL ," + // 6: borderWidth
                "\"MAX_VISIBLE_VALUE_COUNT\" INTEGER NOT NULL ," + // 7: maxVisibleValueCount
                "\"ENABLE_XAXIS\" INTEGER," + // 8: enableXAxis
                "\"ENABLE_YAXIS\" INTEGER," + // 9: enableYAxis
                "\"DRAW_XAXIS_LABEL\" INTEGER," + // 10: drawXAxisLabel
                "\"DRAW_YAXIS_LABEL\" INTEGER," + // 11: drawYAxisLabel
                "\"DRAW_XAXIS_LINE\" INTEGER," + // 12: drawXAxisLine
                "\"DRAW_YAXIS_LINE\" INTEGER," + // 13: drawYAxisLine
                "\"DRAW_XAXIS_GRID_LINES\" INTEGER," + // 14: drawXAxisGridLines
                "\"DRAW_YAXIS_GRID_LINES\" INTEGER," + // 15: drawYAxisGridLines
                "\"X_AXIS_GRID_LINE_WIDTH\" REAL NOT NULL ," + // 16: xAxisGridLineWidth
                "\"Y_AXIS_GRID_LINE_WIDTH\" REAL NOT NULL ," + // 17: yAxisGridLineWidth
                "\"SET_XAXIS_GRID_DASH_LINE\" INTEGER," + // 18: setXAxisGridDashLine
                "\"SET_YAXIS_GRID_DASH_LINE\" INTEGER," + // 19: setYAxisGridDashLine
                "\"TEXT_SIZE\" REAL NOT NULL ," + // 20: textSize
                "\"X_AXIS_POSITION\" INTEGER NOT NULL ," + // 21: xAxisPosition
                "\"X_AXIS_TEXT_COLOR\" INTEGER NOT NULL ," + // 22: xAxisTextColor
                "\"Y_AXIS_TEXT_COLOR\" INTEGER NOT NULL ," + // 23: yAxisTextColor
                "\"SHOW_LEFT_YAXIS\" INTEGER," + // 24: showLeftYAxis
                "\"SHOW_RIGHT_YAXIS\" INTEGER," + // 25: showRightYAxis
                "\"DRAW_ZERO_LINE\" INTEGER," + // 26: drawZeroLine
                "\"ZERO_LINE_WIDTH\" REAL NOT NULL ," + // 27: zeroLineWidth
                "\"ZERO_LINE_COLOR\" TEXT," + // 28: zeroLineColor
                "\"DRAW_LEGEND\" INTEGER);"); // 29: drawLegend
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHART_STYLE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChartStyleEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String backgroundColor = entity.getBackgroundColor();
        if (backgroundColor != null) {
            stmt.bindString(2, backgroundColor);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Boolean drawGrid = entity.getDrawGrid();
        if (drawGrid != null) {
            stmt.bindLong(4, drawGrid ? 1L: 0L);
        }
 
        String gridColor = entity.getGridColor();
        if (gridColor != null) {
            stmt.bindString(5, gridColor);
        }
 
        String borderColor = entity.getBorderColor();
        if (borderColor != null) {
            stmt.bindString(6, borderColor);
        }
        stmt.bindDouble(7, entity.getBorderWidth());
        stmt.bindLong(8, entity.getMaxVisibleValueCount());
 
        Boolean enableXAxis = entity.getEnableXAxis();
        if (enableXAxis != null) {
            stmt.bindLong(9, enableXAxis ? 1L: 0L);
        }
 
        Boolean enableYAxis = entity.getEnableYAxis();
        if (enableYAxis != null) {
            stmt.bindLong(10, enableYAxis ? 1L: 0L);
        }
 
        Boolean drawXAxisLabel = entity.getDrawXAxisLabel();
        if (drawXAxisLabel != null) {
            stmt.bindLong(11, drawXAxisLabel ? 1L: 0L);
        }
 
        Boolean drawYAxisLabel = entity.getDrawYAxisLabel();
        if (drawYAxisLabel != null) {
            stmt.bindLong(12, drawYAxisLabel ? 1L: 0L);
        }
 
        Boolean drawXAxisLine = entity.getDrawXAxisLine();
        if (drawXAxisLine != null) {
            stmt.bindLong(13, drawXAxisLine ? 1L: 0L);
        }
 
        Boolean drawYAxisLine = entity.getDrawYAxisLine();
        if (drawYAxisLine != null) {
            stmt.bindLong(14, drawYAxisLine ? 1L: 0L);
        }
 
        Boolean drawXAxisGridLines = entity.getDrawXAxisGridLines();
        if (drawXAxisGridLines != null) {
            stmt.bindLong(15, drawXAxisGridLines ? 1L: 0L);
        }
 
        Boolean drawYAxisGridLines = entity.getDrawYAxisGridLines();
        if (drawYAxisGridLines != null) {
            stmt.bindLong(16, drawYAxisGridLines ? 1L: 0L);
        }
        stmt.bindDouble(17, entity.getXAxisGridLineWidth());
        stmt.bindDouble(18, entity.getYAxisGridLineWidth());
 
        Boolean setXAxisGridDashLine = entity.getSetXAxisGridDashLine();
        if (setXAxisGridDashLine != null) {
            stmt.bindLong(19, setXAxisGridDashLine ? 1L: 0L);
        }
 
        Boolean setYAxisGridDashLine = entity.getSetYAxisGridDashLine();
        if (setYAxisGridDashLine != null) {
            stmt.bindLong(20, setYAxisGridDashLine ? 1L: 0L);
        }
        stmt.bindDouble(21, entity.getTextSize());
        stmt.bindLong(22, entity.getXAxisPosition());
        stmt.bindLong(23, entity.getXAxisTextColor());
        stmt.bindLong(24, entity.getYAxisTextColor());
 
        Boolean showLeftYAxis = entity.getShowLeftYAxis();
        if (showLeftYAxis != null) {
            stmt.bindLong(25, showLeftYAxis ? 1L: 0L);
        }
 
        Boolean showRightYAxis = entity.getShowRightYAxis();
        if (showRightYAxis != null) {
            stmt.bindLong(26, showRightYAxis ? 1L: 0L);
        }
 
        Boolean drawZeroLine = entity.getDrawZeroLine();
        if (drawZeroLine != null) {
            stmt.bindLong(27, drawZeroLine ? 1L: 0L);
        }
        stmt.bindDouble(28, entity.getZeroLineWidth());
 
        String zeroLineColor = entity.getZeroLineColor();
        if (zeroLineColor != null) {
            stmt.bindString(29, zeroLineColor);
        }
 
        Boolean drawLegend = entity.getDrawLegend();
        if (drawLegend != null) {
            stmt.bindLong(30, drawLegend ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChartStyleEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String backgroundColor = entity.getBackgroundColor();
        if (backgroundColor != null) {
            stmt.bindString(2, backgroundColor);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Boolean drawGrid = entity.getDrawGrid();
        if (drawGrid != null) {
            stmt.bindLong(4, drawGrid ? 1L: 0L);
        }
 
        String gridColor = entity.getGridColor();
        if (gridColor != null) {
            stmt.bindString(5, gridColor);
        }
 
        String borderColor = entity.getBorderColor();
        if (borderColor != null) {
            stmt.bindString(6, borderColor);
        }
        stmt.bindDouble(7, entity.getBorderWidth());
        stmt.bindLong(8, entity.getMaxVisibleValueCount());
 
        Boolean enableXAxis = entity.getEnableXAxis();
        if (enableXAxis != null) {
            stmt.bindLong(9, enableXAxis ? 1L: 0L);
        }
 
        Boolean enableYAxis = entity.getEnableYAxis();
        if (enableYAxis != null) {
            stmt.bindLong(10, enableYAxis ? 1L: 0L);
        }
 
        Boolean drawXAxisLabel = entity.getDrawXAxisLabel();
        if (drawXAxisLabel != null) {
            stmt.bindLong(11, drawXAxisLabel ? 1L: 0L);
        }
 
        Boolean drawYAxisLabel = entity.getDrawYAxisLabel();
        if (drawYAxisLabel != null) {
            stmt.bindLong(12, drawYAxisLabel ? 1L: 0L);
        }
 
        Boolean drawXAxisLine = entity.getDrawXAxisLine();
        if (drawXAxisLine != null) {
            stmt.bindLong(13, drawXAxisLine ? 1L: 0L);
        }
 
        Boolean drawYAxisLine = entity.getDrawYAxisLine();
        if (drawYAxisLine != null) {
            stmt.bindLong(14, drawYAxisLine ? 1L: 0L);
        }
 
        Boolean drawXAxisGridLines = entity.getDrawXAxisGridLines();
        if (drawXAxisGridLines != null) {
            stmt.bindLong(15, drawXAxisGridLines ? 1L: 0L);
        }
 
        Boolean drawYAxisGridLines = entity.getDrawYAxisGridLines();
        if (drawYAxisGridLines != null) {
            stmt.bindLong(16, drawYAxisGridLines ? 1L: 0L);
        }
        stmt.bindDouble(17, entity.getXAxisGridLineWidth());
        stmt.bindDouble(18, entity.getYAxisGridLineWidth());
 
        Boolean setXAxisGridDashLine = entity.getSetXAxisGridDashLine();
        if (setXAxisGridDashLine != null) {
            stmt.bindLong(19, setXAxisGridDashLine ? 1L: 0L);
        }
 
        Boolean setYAxisGridDashLine = entity.getSetYAxisGridDashLine();
        if (setYAxisGridDashLine != null) {
            stmt.bindLong(20, setYAxisGridDashLine ? 1L: 0L);
        }
        stmt.bindDouble(21, entity.getTextSize());
        stmt.bindLong(22, entity.getXAxisPosition());
        stmt.bindLong(23, entity.getXAxisTextColor());
        stmt.bindLong(24, entity.getYAxisTextColor());
 
        Boolean showLeftYAxis = entity.getShowLeftYAxis();
        if (showLeftYAxis != null) {
            stmt.bindLong(25, showLeftYAxis ? 1L: 0L);
        }
 
        Boolean showRightYAxis = entity.getShowRightYAxis();
        if (showRightYAxis != null) {
            stmt.bindLong(26, showRightYAxis ? 1L: 0L);
        }
 
        Boolean drawZeroLine = entity.getDrawZeroLine();
        if (drawZeroLine != null) {
            stmt.bindLong(27, drawZeroLine ? 1L: 0L);
        }
        stmt.bindDouble(28, entity.getZeroLineWidth());
 
        String zeroLineColor = entity.getZeroLineColor();
        if (zeroLineColor != null) {
            stmt.bindString(29, zeroLineColor);
        }
 
        Boolean drawLegend = entity.getDrawLegend();
        if (drawLegend != null) {
            stmt.bindLong(30, drawLegend ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ChartStyleEntity readEntity(Cursor cursor, int offset) {
        ChartStyleEntity entity = new ChartStyleEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // backgroundColor
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // drawGrid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gridColor
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // borderColor
            cursor.getFloat(offset + 6), // borderWidth
            cursor.getInt(offset + 7), // maxVisibleValueCount
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // enableXAxis
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // enableYAxis
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // drawXAxisLabel
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // drawYAxisLabel
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // drawXAxisLine
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // drawYAxisLine
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // drawXAxisGridLines
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // drawYAxisGridLines
            cursor.getFloat(offset + 16), // xAxisGridLineWidth
            cursor.getFloat(offset + 17), // yAxisGridLineWidth
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // setXAxisGridDashLine
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // setYAxisGridDashLine
            cursor.getFloat(offset + 20), // textSize
            cursor.getInt(offset + 21), // xAxisPosition
            cursor.getInt(offset + 22), // xAxisTextColor
            cursor.getInt(offset + 23), // yAxisTextColor
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0, // showLeftYAxis
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0, // showRightYAxis
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // drawZeroLine
            cursor.getFloat(offset + 27), // zeroLineWidth
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // zeroLineColor
            cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0 // drawLegend
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChartStyleEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBackgroundColor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDrawGrid(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setGridColor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBorderColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBorderWidth(cursor.getFloat(offset + 6));
        entity.setMaxVisibleValueCount(cursor.getInt(offset + 7));
        entity.setEnableXAxis(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setEnableYAxis(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setDrawXAxisLabel(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setDrawYAxisLabel(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setDrawXAxisLine(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setDrawYAxisLine(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setDrawXAxisGridLines(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setDrawYAxisGridLines(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setXAxisGridLineWidth(cursor.getFloat(offset + 16));
        entity.setYAxisGridLineWidth(cursor.getFloat(offset + 17));
        entity.setSetXAxisGridDashLine(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setSetYAxisGridDashLine(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setTextSize(cursor.getFloat(offset + 20));
        entity.setXAxisPosition(cursor.getInt(offset + 21));
        entity.setXAxisTextColor(cursor.getInt(offset + 22));
        entity.setYAxisTextColor(cursor.getInt(offset + 23));
        entity.setShowLeftYAxis(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0);
        entity.setShowRightYAxis(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
        entity.setDrawZeroLine(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
        entity.setZeroLineWidth(cursor.getFloat(offset + 27));
        entity.setZeroLineColor(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setDrawLegend(cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChartStyleEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChartStyleEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChartStyleEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
