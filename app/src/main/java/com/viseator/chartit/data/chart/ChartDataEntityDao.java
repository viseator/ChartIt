package com.viseator.chartit.data.chart;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHART_DATA_ENTITY".
*/
public class ChartDataEntityDao extends AbstractDao<ChartDataEntity, Long> {

    public static final String TABLENAME = "CHART_DATA_ENTITY";

    /**
     * Properties of entity ChartDataEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MainValue = new Property(1, String.class, "mainValue", false, "MAIN_VALUE");
        public final static Property MapValue = new Property(2, String.class, "mapValue", false, "MAP_VALUE");
        public final static Property Alias = new Property(3, String.class, "alias", false, "ALIAS");
        public final static Property Label = new Property(4, String.class, "label", false, "LABEL");
        public final static Property Pos = new Property(5, Integer.class, "pos", false, "POS");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property Time = new Property(7, Long.class, "time", false, "TIME");
    }


    public ChartDataEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChartDataEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHART_DATA_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MAIN_VALUE\" TEXT," + // 1: mainValue
                "\"MAP_VALUE\" TEXT," + // 2: mapValue
                "\"ALIAS\" TEXT," + // 3: alias
                "\"LABEL\" TEXT," + // 4: label
                "\"POS\" INTEGER," + // 5: pos
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"TIME\" INTEGER);"); // 7: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHART_DATA_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChartDataEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mainValue = entity.getMainValue();
        if (mainValue != null) {
            stmt.bindString(2, mainValue);
        }
 
        String mapValue = entity.getMapValue();
        if (mapValue != null) {
            stmt.bindString(3, mapValue);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(5, label);
        }
 
        Integer pos = entity.getPos();
        if (pos != null) {
            stmt.bindLong(6, pos);
        }
        stmt.bindLong(7, entity.getType());
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(8, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChartDataEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mainValue = entity.getMainValue();
        if (mainValue != null) {
            stmt.bindString(2, mainValue);
        }
 
        String mapValue = entity.getMapValue();
        if (mapValue != null) {
            stmt.bindString(3, mapValue);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(5, label);
        }
 
        Integer pos = entity.getPos();
        if (pos != null) {
            stmt.bindLong(6, pos);
        }
        stmt.bindLong(7, entity.getType());
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(8, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChartDataEntity readEntity(Cursor cursor, int offset) {
        ChartDataEntity entity = new ChartDataEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mainValue
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mapValue
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // alias
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // label
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // pos
            cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChartDataEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMainValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMapValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlias(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLabel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPos(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChartDataEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChartDataEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChartDataEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
